apply plugin: 'com.android.application'
apply from: file('flavor_config.gradle')

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.marsthink.animationdemo"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        sankuai {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('./debug.keystore')
            storePassword 'android'
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sankuai
        }
        debug {
            signingConfig signingConfigs.sankuai
        }
    }
    sourceSets{
        main{
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:27.0.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
//    compile project(':component')
//    releaseCompile project(path: ':component', configuration: 'release')
//    debugCompile project(path: ':component', configuration: 'debug')
    compile project(path: ':component')
}


//afterEvaluate {
//    android.applicationVariants.each { variant ->
//        def dx = tasks.findByName("dex${variant.name.capitalize()}")
//        def hello = "hello${variant.name.capitalize()}"
//        printInfo("yeah")
////        tasks.findByName(hello).dependsOn dx.taskDependencies.getDependencies(dx)
////        dx.dependsOn tasks.findByName(hello)
//    }
//}
//
//
def printInfo(String flavor){
    println "#################"
    println flavor
    println "#################"
}
